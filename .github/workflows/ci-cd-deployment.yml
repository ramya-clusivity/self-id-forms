# .github/workflows/deploy-cloud-function.yml
name: Deploy Google Cloud Function

on:
  push:
    branches:
      - main
      - dev
      - release
      - ci-cd

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Check the commit message for deployment or test commands
      - name: Check commit message
        id: check_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"

          # Default environment to 'dev'
          DEPLOY_ENV="dev"
        
          # Check if the commit message is "test:" or "deploy:"
          if [[ "$COMMIT_MESSAGE" == test:* ]]; then
            echo "RUN_TESTS=true" >> $GITHUB_ENV
          elif [[ "$COMMIT_MESSAGE" == deploy:* ]]; then
            if [[ "$COMMIT_MESSAGE" == deploy:\ dev ]]; then
              DEPLOY_ENV="dev"
            elif [[ "$COMMIT_MESSAGE" == deploy:\ prod ]]; then
              DEPLOY_ENV="prd"
            fi
            echo "RUN_DEPLOY=true" >> $GITHUB_ENV
          else
            echo "No action specified in the commit message. Skipping tests."
          fi

          # Set environment variables for deployment
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV
          echo "DEPLOY_ENV_UPPER=$(echo $DEPLOY_ENV | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV

      # Step 3: Set up Python for the Cloud Function deployment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'  # Match the runtime of your Cloud Function

      # Step 4: Install dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r cloud_functions/requirements.txt

      # Step 5: Run tests if the commit message includes 'test'
      - name: Run Tests
        if: env.RUN_TESTS == 'true'
        run: |
          if [ -d "cloud_functions/tests" ]; then
            python -m unittest discover -s cloud_functions/tests
          else
            echo "No tests directory found."
          fi

      # Step 6: Authenticate to Google Cloud using a service account key
      - name: Authenticate to Google Cloud
        if: env.RUN_DEPLOY == 'true'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Step 7: Set up the Google Cloud SDK for deployment
      - name: Set up Google Cloud SDK
        if: env.RUN_DEPLOY == 'true'
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Step 8: Deploy to Google Cloud Functions
      - name: Deploy to Google Cloud Functions
        if: env.RUN_DEPLOY == 'true'
        run: |
          echo "DEPLOY_ENV=$DEPLOY_ENV"
          gcloud functions deploy self-id-froms_${{ env.DEPLOY_ENV }} \
            --region=europe-west2 \
            --runtime=python310 \
            --trigger-http \
            --entry-point=self_id_forms \
            --set-env-vars PROJECT_ID=${{ secrets.GCP_PROJECT_ID }},DATASET_ID=Self_id_data,RESPONDENT_TABLE=${{ env.DEPLOY_ENV_UPPER }}_Respondent_data_from_client \
            --source=./cloud_functions \
            --max-instances=10
